AWSTemplateFormatVersion: '2010-09-09'
Description: 'Wild Rydes ECS Infrastructure with CI/CD Pipeline and VPC'

Parameters:
  ECRRepoName:
    Type: String
    Description: Enter the name of the ECR repository to be created
    AllowedPattern: "^[a-z0-9._-]{2,256}$"
    ConstraintDescription: "The repository name must be between 2 and 256 characters and can only contain lowercase letters, numbers, hyphens, underscores, and periods."

  GitHubRepoURL:
    Type: String
    Description: GitHub repository (e.g., https://github.com/username/repo)
  
  GitHubBranch:
    Type: String
    Default: main
    Description: Branch to monitor in the GitHub repository

  GitHubToken:
    Type: String
    Description: GitHub OAuth token
    NoEcho: true

  ECSClusterName:
    Type: String
    Description: Name of the ECS Cluster
    Default: wildrydes-cluster

  ServiceName:
    Type: String
    Description: Name of the ECS Service
    Default: wildrydes-service

  ContainerPort:
    Type: Number
    Description: Port number for the container
    Default: 80

  ContainerName:
    Type: String
    Description: Name of the container
    Default: wildrydes-app

  GitHubOwner:
    Type: String
    Description: GitHub repository owner

Resources:
  # VPC and Networking Resources
  finalexamVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: finalexam-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: finalexam-IGW

  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref finalexamVPC
      InternetGatewayId: !Ref InternetGateway

  # NAT Gateways and Elastic IPs
  NatEIP1:
    Type: AWS::EC2::EIP
    DependsOn: finalexamVPC

  NatEIP2:
    Type: AWS::EC2::EIP
    DependsOn: finalexamVPC

  NatGateway1:
    Type: AWS::EC2::NatGateway
    DependsOn: [NatEIP1, PublicSubnet1]
    Properties:
      AllocationId: !GetAtt NatEIP1.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: NatGateway1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    DependsOn: [NatEIP2, PublicSubnet2]
    Properties:
      AllocationId: !GetAtt NatEIP2.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: NatGateway2

  # Security Groups
  BastionHostSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Bastion Host Security Group
      VpcId: !Ref finalexamVPC
      Tags:
        - Key: Name
          Value: BastionHostSG

  ExternalALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: External Load Balancer Security Group
      VpcId: !Ref finalexamVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ExternalALBSG

  backendappSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Backend Application Security Group
      VpcId: !Ref finalexamVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !Ref ExternalALBSG
      Tags:
        - Key: Name
          Value: backendappSG

  # Create Ingress Rules
  BastionHostSGIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref BastionHostSG
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: 0.0.0.0/0
    DependsOn: BastionHostSG

  ExternalLoadBalancerSGIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ExternalALBSG
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0
    DependsOn: ExternalALBSG

  backendSGIngressBastion:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref backendappSG
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !Ref BastionHostSG
    DependsOn: backendappSG

  backendSGIngressExternalALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref backendappSG
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId: !Ref ExternalALBSG
    DependsOn: backendappSG

  # Create Egress Rules
  BastionHostSGEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref BastionHostSG
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      DestinationSecurityGroupId: !Ref backendappSG
    DependsOn: BastionHostSG

  InternetAccessEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref BastionHostSG
      IpProtocol: "-1"
      FromPort: -1
      ToPort: -1
      CidrIp: 0.0.0.0/0
    DependsOn: BastionHostSG

  ExternalLoadBalancerSGEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref ExternalALBSG
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      DestinationSecurityGroupId: !Ref backendappSG
    DependsOn: ExternalALBSG

  backendSGEgressInternet:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref backendappSG
      IpProtocol: "-1"
      FromPort: -1
      ToPort: -1
      CidrIp: 0.0.0.0/0
    DependsOn: backendappSG

  # Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref finalexamVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: BastionHostsAZ1

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref finalexamVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: us-east-1a
      Tags:
        - Key: Name
          Value: backendappAZ1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref finalexamVPC
      CidrBlock: 10.0.11.0/24
      AvailabilityZone: us-east-1b
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: BastionHostsAZ2

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref finalexamVPC
      CidrBlock: 10.0.12.0/24
      AvailabilityZone: us-east-1b
      Tags:
        - Key: Name
          Value: backendappAZ2

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref finalexamVPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref finalexamVPC
      Tags:
        - Key: Name
          Value: PrivateRouteTableAZ1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref finalexamVPC
      Tags:
        - Key: Name
          Value: PrivateRouteTableAZ2

  # Routes
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachInternetGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRoute1:
    Type: AWS::EC2::Route
    DependsOn: NatGateway1
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateRoute2:
    Type: AWS::EC2::Route
    DependsOn: NatGateway2
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  # Route Table Associations
  AssociatePublicRouteTable1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  AssociatePublicRouteTable2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  AssociatePrivateRouteTable1BACKENDAppAZ1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  AssociatePrivateRouteTable2backendappAZ2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  # Load Balancer Resources
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn:
      - AttachInternetGateway
      - PublicSubnet1
      - PublicSubnet2
      - ExternalALBSG
    Properties:
      Name: External-ALB
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ExternalALBSG
      Scheme: internet-facing

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: finalexamVPC
    Properties:
      Name: BackendApp-Targetgroup
      Protocol: HTTP
      Port: 80
      VpcId: !Ref finalexamVPC
      TargetType: ip
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: 
      - TargetGroup 
      - LoadBalancer
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  # ECS Resources
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ECSClusterName
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  # CloudWatch Logs Group
  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${ECSClusterName}"
      RetentionInDays: 7

  # ECR Repository
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref ECRRepoName
      ImageScanningConfiguration:
        ScanOnPush: true
      Tags:
        - Key: Name
          Value: !Ref ECRRepoName

  # IAM Roles
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ecsTaskExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: /

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: codebuildServiceRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: 
              - sts:AssumeRole
              - ecr:GetAuthorizationToken
      Policies:
        - PolicyName: CodeBuildAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:PutImage
                  - ecs:Describe*
                  - ecs:UpdateService
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecs:DescribeServices
                  - iam:PassRole
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                  - s3:ListBucket
                Resource: "*"

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: codepipelineServiceRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelinePermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                  - ecs:DescribeServices
                  - ecs:UpdateService
                  - iam:PassRole
                Resource: "*"

  # Task Definition
  InitialTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: CloudWatchLogsGroup
    Properties:
      Family: wildrydes-task
      NetworkMode: awsvpc
      Cpu: '256'
      Memory: '512'
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: !Ref ContainerName
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepoName}:latest
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              Protocol: tcp
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "/ecs/${ECSClusterName}"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Environment:
            - Name: FLASK_APP
              Value: app.py
            - Name: FLASK_ENV
              Value: production
          HealthCheck:
            Command: 
              - CMD-SHELL
              - curl -f http://localhost:80/ || exit 1
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60

  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - Listener
      - TargetGroup
      - CloudWatchLogsGroup
      - InitialTaskDefinition
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: !Ref ServiceName
      TaskDefinition: !Ref InitialTaskDefinition
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      HealthCheckGracePeriodSeconds: 120
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref backendappSG
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
      LoadBalancers:
        - ContainerName: !Ref ContainerName
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup

  # CodeBuild Project
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    DependsOn:
      - CodeBuildServiceRole
      - ECSTaskExecutionRole
      - CodePipelineServiceRole
    Properties:
      Name: WildRydes-CodeBuild
      Description: Builds and pushes Docker images to ECR for ECS deployment
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.yml
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepoName}
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: CONTAINER_NAME
            Value: !Ref ContainerName
          - Name: ECS_CLUSTER_NAME
            Value: !Ref ECSClusterName
          - Name: ECS_SERVICE_NAME
            Value: !Ref ServiceName
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      TimeoutInMinutes: 30

  # S3 Bucket for Artifacts
  ArtifactStoreBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # CodePipeline
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: wildrydes-pipeline
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactStoreBucket
      Stages:
        - Name: Source
          Actions:
            - Name: GitHub-Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: '1'
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref ECRRepoName
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: SourceArtifact
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: CodeBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: ECS-Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: ECS
              Configuration:
                ClusterName: !Ref ECSCluster
                ServiceName: !Ref ServiceName
                FileName: imagedefinitions.json
              InputArtifacts:
                - Name: BuildArtifact
              RunOrder: 1

  # CloudWatch Alarms
  BuildFailureAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: CodeBuild-Failure-Alarm
      AlarmDescription: Alarm when CodeBuild fails
      MetricName: FailedBuilds
      Namespace: AWS/CodeBuild
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: ProjectName
          Value: !Ref CodeBuildProject

  DeployFailureAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: ECS-Deploy-Failure-Alarm
      AlarmDescription: Alarm when ECS deployment fails
      MetricName: DeploymentFailures
      Namespace: AWS/ECS
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: ClusterName
          Value: !Ref ECSCluster
        - Name: ServiceName
          Value: !Ref ServiceName

Outputs:
  VPCId:
    Description: ID of the created VPC
    Value: !Ref finalexamVPC
  PublicSubnet1Id:
    Description: ID of the first public subnet
    Value: !Ref PublicSubnet1
  PublicSubnet2Id:
    Description: ID of the second public subnet
    Value: !Ref PublicSubnet2
  ALBDNSName:
    Description: DNS name of the ALB
    Value: !GetAtt LoadBalancer.DNSName
  ECSClusterName:
    Description: Name of the ECS Cluster
    Value: !Ref ECSClusterName
  ServiceName:
    Description: Name of the ECS Service
    Value: !Ref ServiceName
  CodePipelineName:
    Description: Name of the CodePipeline
    Value: !Ref CodePipeline
  ArtifactStoreBucketName:
    Description: Name of the S3 artifact store bucket
    Value: !Ref ArtifactStoreBucket